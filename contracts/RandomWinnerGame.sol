// SPDX-License-Identifier: MIT
// SPDX-License-Identifier: SEE LICENSE IN LICENSE
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@chainlink/contracts/src/v0.8/VRFConsumerBase.sol";

contract RandomWinnerGame is VRFConsumerBase, Ownable {

    // Chainlink variable used when calling the function request randomness
    // The amount of LINK to send with the request
    uint256 public fee;
    // Id of publix key against which randomness is generated
    bytes32 public keyHash;

    /**
     * @dev max 20 playesrs will be allowed per game
     * out of which one player will be winner.
     * To enter the game each player has to pay entry fee.
     * The winner will get the all fees in contract
     */
     // Address of the players
     address[] public players;
     // Max number of players per game
     uint8 maxPlayers;
     // Variable to indicate if the game has started or not
     bool public gameStarted;
     // Fees foe entering the game
     uint256 entryFee;
     // Current gameId
     uint256 public gameId;


    event GameStarted(uint256 gameId, uint8 maxPlayers, uint256 entryFee);
    event PlayerJoined(uint256 gameId, address player);
    event GameEnded(uint256 gameId, address winner, bytes32 requestId);

    /**
    * constructor inherits a VRFConsumerBase and initiates the values for keyHash, fee and gameStarted
    * @param vrfCoordinator address of VRFCoordinator contract
    * @param linkToken address of LINK token contract- Which initialise the link Interface in VRFConsumnerBase
    * @param vrfFee the amount of LINK to send with the request
    * @param vrfKeyHash ID of public key against which randomness is generated
    */
    constructor(address vrfCoordinator, address linkToken, bytes32 vrfKeyHash, uint256 vrfFee)
    VRFConsumerBase(vrfCoordinator, linkToken) {
        fee = vrfFee;
        keyHash = vrfKeyHash;
        gameStarted = false;
    }



    function startGame(uint8 _maxPlayers, uint256 _entryFee) public onlyOwner {
        require(!gameStarted, "Game is currently running");
        // Empty the players array
        delete players;
        maxPlayers = _maxPlayers;
        gameStarted = true;
        entryFee = _entryFee;
        gameId++;
        emit GameStarted(gameId, maxPlayers, entryFee);
    }


    /**
        @dev called when player wants to join the game
     */
    function joinGame() public payable {
        require(msg.value == entryFee);
        require(players.length < maxPlayers, "Maximum number reached");
        require(gameStarted, "game has not been started yet");
        players.push(msg.sender);
        emit PlayerJoined(gameId ,msg.sender);
        // If enough players has joined then start the game
        if (players.length == maxPlayers) {
            getRandomWinner();
        }
    }




    /**
     * @dev calls the requestRansomness function 
     */
    function getRandomWinner() private returns (bytes32 requestId) {
        // Inorder to call the requestRandomness frunction, this contract needs to have some link token s check that
        require(LINK.balanceOf(address(this)) >= fee, "Not enough Link");
        return requestRandomness(keyHash, fee);
    }

    /**
    * fulfillRandomness is called by VRFCoordinator when it receives a valid VRF proof.
    * This function is overrided to act upon the random number generated by Chainlink VRF.
    * @param requestId  this ID is unique for the request we sent to the VRF Coordinator
    * @param randomness this is a random unit256 generated and returned to us by the VRF Coordinator
   */
    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual override  {
        // Randomness can be anything. So we need to take mod of it
        // Winner index should be between 0 to palyers.length - 1
        uint256 winnerIndex = randomness % players.length;
        address winner = players[winnerIndex];
        (bool sent, ) = payable(winner).call{value: address(this).balance}("");
        require(sent, "Failed to send Ether");
        emit GameEnded(gameId, winner, requestId);
        gameStarted = false;
    }


    receive() external payable {}
    fallback() external payable {}



}